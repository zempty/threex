<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出，可用于对log4j2进行故障检测 -->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，单位是s,最小是5s-->
<!-- 设置log4j2的自身log级别为warn -->
<configuration status="WARN" monitorInterval="30">
    <!-- 正如你所想，这里可以跟maven一样定义一些属性，而后使用 -->
    <properties>
        <property name="projectName">all</property>
    </properties>

	<!--先定义所有的appender -->
	<appenders>
		<!--这个输出控制台的配置 -->
		<!-- target:SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT. -->
		<console name="Console" target="SYSTEM_OUT">
		    <ThresholdFilter level="error" /><!-- 这里若不设置，将继承ROOT的级别 -->
			<!--输出日志的格式 -->
			<!-- 请注意：[ %l]里面必须以空格开头，不然在eclipse下点击跳不到源码对应的行 -->
			<PatternLayout pattern="%n%-d{yyyy-MM-dd HH:mm:ss.SSS} %n[月步-%p]-[Thread: %t]-[ %l]:%n  %m%n" />
		</console>
		<!-- File节点用来定义输出到指定位置的文件的Appender -->
		<!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
		<File name="log" fileName="logs/${projectName}.log" append="false">
		    <ThresholdFilter level="info" />
			<PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n" />
		</File>
		<!-- RollingFile节点用来定义超过指定大小自动删除旧的创建新的的Appender -->
		<!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingFile name="RollingFileInfo" fileName="logs/${projectName}/info.log"
			filePattern="logs/${projectName}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<ThresholdFilter level="info" onMatch="ACCEPT"
				onMismatch="DENY" />
			<PatternLayout pattern="%n%-d{yyyy-MM-dd HH:mm:ss.SSS} %n[%p]-[Thread: %t]-[%l]:%n  %m%n" />
			<!-- Policies:指定滚动日志的策略，就是什么时候进行新建日志文件输出日志 -->
			<Policies>
			    <!-- TimeBasedTriggeringPolicy:Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am. -->
				<TimeBasedTriggeringPolicy />
				<!-- SizeBasedTriggeringPolicy:Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小 -->
				<SizeBasedTriggeringPolicy size="100MB" />
			</Policies>
		</RollingFile>
		<RollingFile name="RollingFileWarn" fileName="logs/${projectName}/warn.log"
			filePattern="logs/${projectName}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
			<ThresholdFilter level="warn" onMatch="ACCEPT"
				onMismatch="DENY" />
			<PatternLayout pattern="%n%-d{yyyy-MM-dd HH:mm:ss.SSS} %r%n[%p]-[Thread: %t]-[ %l]:%n  %m%n" />
			<Policies>
				<TimeBasedTriggeringPolicy />
				<SizeBasedTriggeringPolicy size="100MB" />
			</Policies>
			<!-- DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性) -->
			<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
			<DefaultRolloverStrategy max="20" />
		</RollingFile>
		<RollingFile name="RollingFileError" fileName="logs/${projectName}/error.log"
			filePattern="logs/${projectName}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
			<ThresholdFilter level="error" onMatch="ACCEPT"
				onMismatch="DENY" />
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n" />
			<Policies>
				<TimeBasedTriggeringPolicy />
				<SizeBasedTriggeringPolicy size="100MB" />
			</Policies>
		</RollingFile>
	</appenders>
	<!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
	<!-- Loggers节点，常见的有两种:Root和Logger -->
	<loggers>
		<!-- Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出
             level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
             AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender. -->
		<root level="all">
			<appender-ref ref="Console" />
			<appender-ref ref="log" />
			<appender-ref ref="RollingFileInfo" />
			<!-- <appender-ref ref="RollingFileWarn" /> -->
			<appender-ref ref="RollingFileError" />

	    <!-- Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。
            level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
            name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点.
            AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置Logger的additivity="false"只在自定义的Appender中进行输出。 -->
		<!-- 为下面两个包指定级别，此级别在root-level的基础上约束，子元素则是指明在哪个appender生效-->
		<!-- <logger name="org.springframework" level="INFO"></logger>
		<logger name="org.mybatis" level="INFO"><AppenderRef ref="Console"/></logger> -->
		</root>
	</loggers>
</configuration>
<!-- 关于日志level.
	共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
	All:最低等级的，用于打开所有日志记录.
	Trace:是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出.
	Debug:指出细粒度信息事件对调试应用程序是非常有帮助的.
	Info:消息在粗粒度级别上突出强调应用程序的运行过程.
	Warn:输出警告及warn以上级别的日志.
	Error:输出错误信息日志.
	Fatal:输出每个严重的错误事件将会导致应用程序的退出的日志.
	OFF:最高等级的，用于关闭所有日志记录. -->