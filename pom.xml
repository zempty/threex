<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.zhu2chu</groupId>
	<artifactId>all</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<properties>
		<jdk.version>1.8</jdk.version>
		<jfinal.version>3.3</jfinal.version>
		<mysql.version>5.1.40</mysql.version>
		<druid.version>1.0.29</druid.version>
		<fastjson.version>1.2.31</fastjson.version>
		<profiles.active>development</profiles.active>
		<servlet.api.version>3.1.0</servlet.api.version>
		<jfinal-mail-plugin.version>2.2</jfinal-mail-plugin.version>
		<cron4j.version>2.2.5</cron4j.version>
		<dom4j.version>1.6.1</dom4j.version>
		<joda.version>2.9.9</joda.version>
		<netty.version>4.1.10.Final</netty.version>
		<tomcat.embed.version>8.0.45</tomcat.embed.version>
		<tomcat.embed.scope>compile</tomcat.embed.scope>
		<spring.version>4.3.11.RELEASE</spring.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.jfinal</groupId>
			<artifactId>jfinal</artifactId>
			<version>${jfinal.version}</version>
		</dependency>
		<dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		    <version>${mysql.version}</version>
		</dependency>

		<!-- 阿里巴巴 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>${druid.version}</version>
		</dependency>
		<dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson.version}</version>
        </dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${servlet.api.version}</version>
			<scope>provided</scope>
		</dependency>
		<!-- jfinal plugin -->
		<dependency>
			<groupId>cn.fsdev</groupId>
			<artifactId>jfinal-mail-plugin</artifactId>
			<version>${jfinal-mail-plugin.version}</version>
		</dependency>
		<dependency>
		    <groupId>com.github.jieblog</groupId>
		    <artifactId>jfinal-shiro</artifactId>
		    <version>1.0</version>
		</dependency>

		<dependency>
		    <groupId>javax.websocket</groupId>
		    <artifactId>javax.websocket-api</artifactId>
		    <version>1.1</version>
		</dependency>
		<dependency>
            <groupId>it.sauronsoftware.cron4j</groupId>
            <artifactId>cron4j</artifactId>
            <version>${cron4j.version}</version>
        </dependency>
        <dependency>
		    <groupId>dom4j</groupId>
		    <artifactId>dom4j</artifactId>
		    <version>${dom4j.version}</version>
		</dependency>
		<!-- apache commons -->
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-lang3</artifactId>
		    <version>3.5</version>
		</dependency>
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-math3</artifactId>
		    <version>3.6.1</version>
		</dependency>
		<dependency>
		    <groupId>commons-codec</groupId>
		    <artifactId>commons-codec</artifactId>
		    <version>1.10</version>
		</dependency>
		<dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <version>1.14</version>
        </dependency>
        <dependency>
		    <groupId>commons-io</groupId>
		    <artifactId>commons-io</artifactId>
		    <version>2.5</version>
		</dependency>
        <!-- 用以支持apache commons compress -->
        <dependency>
		    <groupId>org.tukaani</groupId>
		    <artifactId>xz</artifactId>
		    <version>1.6</version>
		</dependency>
		<!-- log4j -->
		<!-- <dependency>
		    <groupId>log4j</groupId>
		    <artifactId>log4j</artifactId>
		    <version>1.2.17</version>
		</dependency> -->
		<dependency>
            <groupId>com.jfinal</groupId>
            <artifactId>jetty-server</artifactId>
            <version>8.1.8</version>
            <!-- 此处的 scope 值为 compile 仅为支持 IDEA 下启动项目打 war 包时需要改成 provided，以免将一些无用的 jar 打进去 -->
            <scope>compile</scope>
        </dependency>
		<dependency>
		    <groupId>com.belerweb</groupId>
		    <artifactId>pinyin4j</artifactId>
		    <version>2.5.1</version>
		</dependency>
		<!-- Required in all environments. Slf4j's slf4j-api jar and one of its
		     binding jars is required. commons-beanutils is required only if using
		     INI config. -->
		<dependency>
		    <groupId>org.apache.shiro</groupId>
		    <artifactId>shiro-core</artifactId>
		    <version>1.3.2</version>
		</dependency>
		<!-- Enables support for web-based applications. -->
		<dependency>
		    <groupId>org.apache.shiro</groupId>
		    <artifactId>shiro-web</artifactId>
		    <version>1.3.2</version>
		</dependency>
		<!-- Enables Ehcache-based famework caching. -->
		<!-- <dependency>
		    <groupId>org.apache.shiro</groupId>
		    <artifactId>shiro-ehcache</artifactId>
		    <version>1.3.2</version>
		</dependency> -->
		<dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache-core</artifactId>
            <version>2.6.11</version>
        </dependency>
        <!-- java字节码操作 -->
        <dependency>
		    <groupId>org.javassist</groupId>
		    <artifactId>javassist</artifactId>
		    <version>3.21.0-GA</version>
		</dependency>
		<dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>${joda.version}</version>
        </dependency>
		<!-- 一个网友总结的工具包 -->
		<dependency>
		    <groupId>com.xiaoleilu</groupId>
		    <artifactId>hutool-all</artifactId>
		    <version>3.1.1</version>
        </dependency>
        <dependency>
		    <groupId>com.h2database</groupId>
		    <artifactId>h2</artifactId>
		    <version>1.4.196</version>
		</dependency>
		<dependency>
		    <groupId>com.jfinal</groupId>
		    <artifactId>cos</artifactId>
		    <version>2017.5</version>
		</dependency>
		<!-- 用于构建网络应用的炸包 -->
		<dependency>
		    <groupId>io.netty</groupId>
		    <artifactId>netty-all</artifactId>
		    <version>${netty.version}</version>
		</dependency>
		<dependency>
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>1.10.2</version>
        </dependency>
        <!-- 事件驱动插件 -->
        <dependency>
		    <groupId>net.dreamlu</groupId>
		    <artifactId>JFinal-event</artifactId>
		    <version>1.5.1</version>
		</dependency>
		<!-- 线上压缩 -->
		<!-- <dependency>
		    <groupId>net.dreamlu</groupId>
		    <artifactId>JFinal-assets</artifactId>
		    <version>1.2.0</version>
		</dependency> -->
		<dependency>
		    <groupId>com.yahoo.platform.yui</groupId>
		    <artifactId>yuicompressor</artifactId>
		    <version>2.4.8</version>
		</dependency>
		<!-- <dependency>
            <groupId>it.sauronsoftware</groupId>
            <artifactId>jave</artifactId>
            <version>1.0.2</version>
        </dependency> -->
        <!-- 内嵌tomcat -->
        <!-- <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-core</artifactId>
            <version>${tomcat.embed.version}</version>
            <scope>${tomcat.embed.scope}</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-logging-juli</artifactId>
            <version>${tomcat.embed.version}</version>
            <scope>${tomcat.embed.scope}</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-websocket</artifactId>
            <version>${tomcat.embed.version}</version>
            <scope>${tomcat.embed.scope}</scope>
        </dependency> -->
        <!--
        0虽然我们不用jsp，但这玩意儿也要加上，不然报错。此依赖会同时载入ecj,embed-el包
        1这玩意儿会导致jetty9插件启动失败，必须去embed tomcat相关的jar才行
        -->
        <!-- <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
            <version>${tomcat.embed.version}</version>
            <scope>${tomcat.embed.scope}</scope>
        </dependency> -->
        <!-- log4j2 -->
        <dependency>
		    <groupId>org.apache.logging.log4j</groupId>
		    <artifactId>log4j-core</artifactId>
		    <version>2.9.0</version>
		</dependency>
		<!-- <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-web</artifactId>
            <version>2.9.0</version>
        </dependency> -->
		<!-- <dependency>此处可以不显式配置，因为log4j-core已依赖此项
		    <groupId>org.apache.logging.log4j</groupId>
		    <artifactId>log4j-api</artifactId>
		    <version>2.9.0</version>
		</dependency> -->
		<dependency>
            <groupId>com.zhu2chu</groupId>
            <artifactId>elfinder2</artifactId>
            <version>1.0.1</version>
            <!-- artifactId-version-classifier.jar
            _查找elfinder2-1.0.1-classes.jar -->
            <classifier>classes</classifier>
        </dependency>
        <!-- spring大全 -->
        <dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-core</artifactId><!--(必须)这个jar 文件包含Spring 框架基本的核心工具类。Spring 其它组件要都要使用到这个包里的类，是其它组件的基本核心，当然你也可以在自己的应用系统中使用这些工具类。 外部依赖Commons Logging， (Log4J)。-->
		    <version>${spring.version}</version>
		</dependency>
		<dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId><!--(必须)这 个jar 文件是所有应用都要用到的，它包含访问配置文件、创建和管理bean 以及进行Inversion of Control / Dependency Injection（IoC/DI）操作相关的所有类。如果应用只需基本的IoC/DI 支持，引入spring-core.jar 及spring-beans.jar 文件就可以了。 外部依赖spring-core，(CGLIB)。-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId><!--(必须)这 个jar 文件包含在应用中使用Spring 的AOP 特性时所需的类和源码级元数据支持。使用基于AOP 的Spring特性，如声明型事务管理（Declarative Transaction Management），也要在应用里包含这个jar包。 外部依赖spring-core， (spring-beans，AOP Alliance， CGLIB，Commons Attributes)。-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId><!--(必须)这 个jar 文件在基础IOC功能上为Spring 核心提供了大量扩展服务，此外还提供许多企业级服务的支持，有邮件服务、任务调度、JNDI定位，EJB集成、远程访问、缓存以及多种视图层框架的支持。可以找到使用Spring ApplicationContext特性时所需的全部类，JDNI 所需的全部类，instrumentation组件以及校验Validation 方面的相关类。 外部依赖spring-beans, (spring-aop)。-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId><!--(必须)这 个jar 文件包含对Spring 对JDBC 数据访问进行封装的所有类。 外部依赖spring-beans，spring-dao。-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId><!--(必须)这个jar 文件包含Web 应用开发时，用到Spring 框架时所需的核心类，包括自动载入Web Application Context 特性的类、Struts 与JSF 集成类、文件上传的支持类、Filter 类和大量工具辅助类。 外部依赖spring-context, Servlet API, (JSP API, JSTL, Commons FileUpload, COS)。-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId><!--这个jar 文件包含Spring MVC 框架相关的所有类。包含国际化、标签、Theme、视图展现的FreeMarker、JasperReports、Tiles、Velocity、XSLT相关类。包括框架的Servlets，Web MVC框架，控制器和视图支持。当然，如果你的应用使用了独立的MVC 框架，则无需这个JAR 文件里的任何类。 外部依赖spring-web, (spring-support，Tiles，iText，POI)。-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId><!--提供对AspectJ的支持，以便可以方便的将面向方面的功能集成进IDE中，比如Eclipse AJDT。-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId><!--Spring context的扩展支持，用于MVC方面。-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-expression</artifactId><!--Spring表达式语言。-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-instrument</artifactId><!--Spring对服务器的代理接口-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-instrument-tomcat</artifactId><!--Spring对tomcat连接池的集成-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jms</artifactId><!--为简化jms api的使用而做的简单封装。 外部依赖spring-beans，spring-dao，JMS API。 -->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId><!--整合第三方的orm实现，如hibernate，ibatis，jdo以及spring 的jpa实现-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId><!--Spring对于object/xml映射的支持，可以让JAVA与XML之间来回切换-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-messaging</artifactId><!-- 为集成messaging api和消息协议提供支持 -->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId><!--对JUNIT等测试框架的简单封装-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId><!--为JDBC、Hibernate、JDO、JPA等提供的一致的声明式和编程式事务管理-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc-portlet</artifactId><!--Spring MVC的增强-->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-websocket</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>com.github.crab2died</groupId>
            <artifactId>Excel4J</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>com.github.abel533</groupId>
            <artifactId>ECharts</artifactId>
            <version>3.0.0</version>
        </dependency>
	</dependencies>

	<build>
		<sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>
		<finalName>${project.artifactId}-${project.version}</finalName>
		<resources>
			<resource>
				<directory>src/main/config</directory>
				<!-- 此处只需把config下的文件作为资源文件，不包括它的子文件夹。因为这些子文件夹的资源文件是根据环境选择其中一套 -->
				<excludes>
				    <exclude>app/**</exclude>
				    <exclude>development/**</exclude>
				    <exclude>production/**</exclude>
				</excludes>
			</resource>
			<resource>
			    <directory>src/main/config/${profiles.active}</directory>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.1.0</version>
				<configuration>
					<attachClasses>true</attachClasses>
					<webappDirectory>src/main/config/app</webappDirectory>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.7.0</version>
				<configuration>
					<source>${jdk.version}</source>
					<target>${jdk.version}</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<!-- 读取properties文件的插件 -->
			<plugin>
		        <groupId>org.codehaus.mojo</groupId>
		        <artifactId>properties-maven-plugin</artifactId>
		        <version>1.0.0</version>
		        <executions>
		            <execution>
		                <phase>initialize</phase><!-- 要绑定到的生命周期的阶段 -->
		                <goals>
		                    <goal>read-project-properties</goal><!-- 要绑定的插件的目标 -->
		                </goals>
		                <configuration>
		                    <files>
		                        <file>${basedir}/src/main/config/global.secret</file>
		                    </files>
		                </configuration>
		            </execution>
		        </executions>
		    </plugin>
			<!-- <plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
				    不使用默认src/main/webapp的话得用这个节点指定位置
				    <warSourceDirectory>src/main/config/app</warSourceDirectory>
					<port>8022</port>
					<path>/</path>
					<url>http://localhost:9090/manager/text</url>
					<server>tomcat7</server>
					<contextReloadable>false</contextReloadable>
				</configuration>
			</plugin> -->
			<!-- jetty use to main to run directly -->
			<!-- <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>8.1.8.v20121106</version>
                <configuration>
                    <stopKey>stop</stopKey>
                    <stopPort>5599</stopPort>
                    <webAppConfig>
                        <contextPath>/</contextPath>
                    </webAppConfig>
                    <scanIntervalSeconds>5</scanIntervalSeconds>
                    <connectors>
                        <connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
                            <port>80</port>
                            <maxIdleTime>60000</maxIdleTime>
                        </connector>
                    </connectors>
                </configuration>
            </plugin> -->
            <!-- <plugin>
                mvn jetty:run 运行此插件,jetty为插件短前缀，run为goal
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>9.4.6.v20170531</version>
                -官网配置项：http://www.eclipse.org/jetty/documentation/current/jetty-maven-plugin.html
                <configuration>
                    <scanIntervalSeconds>5</scanIntervalSeconds>每隔几秒扫描一下文件有没变化以便热加载
                    <httpConnector>
                        <port>8022</port>
                    </httpConnector>
                    -配置项在：Configuring Your WebApp章节
                    <webApp>
                        <contextPath>/all</contextPath>
                        <baseResource>src/main/config/app</baseResource>指定静态资源路径，默认是src/main/webapp。这是官网的说法，可以我设置这个木有用，设置下面的才有用:s1
                        <resourceBases>src/main/config/app</resourceBases>:s1 设置这个才有用
                    </webApp>
                </configuration>
            </plugin> -->
		</plugins>
	</build>
	<!-- 配置文件，可根据环境选择 -->
	<profiles>
	    <!-- 开发环境 -->
		<profile>
			<id>development</id>
			<activation>
                <activeByDefault>true</activeByDefault>
            </activation>
		</profile>
		<!-- 生产环境 -->
		<profile>
            <id>production</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>3.0.1</version>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
	</profiles>
</project>